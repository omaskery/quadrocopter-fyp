#ifndef PWM_H
#define PWM_H

#include "../includes.h"

// pwm generator object
typedef struct pwm_generator_t
{
	unsigned long period;					// the period of PWM signal generated by this generator in clock cycles
	unsigned long number;					// the number of the generator
	unsigned long base;						// the base address of the PWM peripheral
} pwm_generator;

// pwm channel object
typedef struct pwm_t
{
	pwm_generator *generator;			// pointer to a generator object to which this PWM channel belongs
	unsigned long number;					// the number of this PWM channel
} pwm;

// fetch the divider for the PWM clock frequency
int  PwmClockDivider(void);

// initialise a PWM generator, takes this*, base PWM address, generator address and the period of the signal in milliseconds
void PwmGeneratorInitialise(pwm_generator*, unsigned long, unsigned long, unsigned long);
// initialise a PWM channel, takes this*, a generator*, the number of the PWM channel, the starting pulse width in clock cycles
void PwmInitialise(pwm*, pwm_generator*, unsigned long, unsigned long);
// set the pulse width of the specified channel
void PwmSet(pwm*, unsigned long);
// set the pulse width of the specified channel as a percentage of the full period
void PwmSetPercentage(pwm*, float);
// enable a PWM generator (enabling both of it's PWM channels)
void PwmGeneratorEnable(const pwm_generator*);
// disable a PWM generator
void PwmGeneratorDisable(const pwm_generator*);

// objects describing first two generators (and the associated first four pwm channels)
extern pwm_generator pwm_gen0, pwm_gen1;
extern pwm pwm0, pwm1, pwm2, pwm3;

// arrays for referring to all generators/pwm-channels in one place for convenient for-loop type stuff
extern pwm_generator *all_pwm_gens[2];
extern pwm *all_pwm[4];

#endif
